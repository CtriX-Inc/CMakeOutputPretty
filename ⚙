#!/usr/local/bin/python3.9
# -*- coding: UTF-8 -*-
import os
thispath=os.path.dirname(os.path.abspath(__file__))
exec(open(thispath+'/defs').read())
sys.path.append(thispath+'/modules')

import mymodule
import ctrixmake

parser = argparse.ArgumentParser(description='\033[1;32mCmake compiler output proccessor.\033[0m')
#parser.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer for the accumulator')
#parser.add_argument('-h', action='help', default=argparse.SUPPRESS, help='Show this help message and exit.')
parser.add_argument('-d', '--debug', default=False, action="store_true", help='Run with debug (default: no debug)')
parser.add_argument('-c', '--cpu', nargs='?', default="1", help='Count of cpu numbers')
parser.add_argument('-r', '--replace', nargs='?', default="CtrixAudio", help='Replace main includes dir')
parser.add_argument('-v', '--version', action='version',
                    version='%(prog)s 0.8', help="Show program's version number and exit.")
a = parser.parse_args()

d = dict()
d['build'] = []
tic = time.perf_counter()
d['starttime'] = tic

arg = sys.argv
#args = arg.pop(0)
#print(args)
prog = sys.argv[0][sys.argv[0].rfind("/")+1:]
path = os.getcwd()
mpath = ctrixmake.RemoveLastDirectoryPartOf(path)
writeLogFile = path + '/build.log'
timeElapsed = 0
arr = []
argExec = [prog]
for ar in arg:
	if ar is not sys.argv[0]:
		argExec.append(ar)

proccess = 'make -j'+a.cpu

if a.debug:
	print ('⿸\033[1;32mArgs-Ліст: \033[0m', str(arg), '('+str(len(arg))+')')
	print("⿶\033[1;2;32mApp-Тека: \033[0m"+thispath)
	print("⿴\033[1;31mБійця-Тека: \033[0m"+path)
	print("⿴\033[1;31mХійня-Тека: \033[0m"+mpath)
	print("⿻\033[1;2;31mХій-Exec: \033[0m"+str(argExec))
	print("⿻\033[1;2;31mХуй-Exec: \033[0m"+str(proccess))
	print("⏱ \033[1;2;31mХій-Чека: \033[0m"+str(tic))

#print(proccess)
proc = Popen(proccess, shell=True, stdout=PIPE)

for line in proc.stdout:
	data = dict()
	line = str(line).replace(str("b'["), "").replace(str("b'"), "")
	line = line.lstrip()[:-3]
	text = "0"
	text2 = "0"
	if "%" in line:
		perc = line.split('%')[0]
	else:
		perc = "0"

	data['perc'] = perc
	tox = time.perf_counter()
	tos = round(((tox - tic) / 60), 2)
#	if int(perc) > 1:
#		timeElapsed = tos * 100
#	else:
#		timeElapsed = tos
#	print( "timeElapsed: " + str(timeElapsed) )
	if ".dir/" in line:
		sour = line.split('.dir/')[1].lstrip()[:-2]
		data['sour'] = sour
		if "%]" in line:
			if int(perc) < 10:
				percnt = "\033[1;2;31m00\033[0m"+perc
			if int(perc) >= 10:
				percnt = "\033[1;2;31m0\033[0m"+perc
			if int(perc) == 100:
				percnt = perc
			#tnxt = line.split("%] ")[1]
			fina = sour[sour.rfind("/")+1:]
			data['fnam'] = fina
			hpth = sour.replace(fina, "")
			hpth = ctrixmake.ReplaceSrcPaths(hpth, mpath, a.replace)
			#hpth = hpth.replace("JuceLibraryCode", "Хій̂©®™")
			fext = fina.split('.')[1]
			fnam = fina.split('.')[0]
			fnam = fnam.replace("include_juce_", "").replace("include_", "")
			text = ctrixmake.ShowPercents(perc, percnt)+ctrixmake.ShowSource(hpth, fnam, fext)
			text2 = ctrixmake.ShowPercentsFile(perc, tos)+ctrixmake.ShowSourceFile(hpth, fnam, fext)
		else:
			if " --" in line:
				text = "⚡ \033[1;35m"+line+"\033[0m"
				text2 = line
			else:
				text = "⚾ \033[34m"+line+"\033[0m"
				text2 = line
	else:
		sour = "0"
		if "%]" in line:
			tnxt = line.split("%] ")[1]
			tnxt = tnxt.replace("Linking CXX shared module", "Linking shared plugin")
			tnxt = tnxt.replace("Automatic MOC and UIC for target", "Moc and Uic for").replace("Automatic RCC for", "Auto-Rcc for")
			fina = tnxt[tnxt.rfind("/")+1:]
			text = "☄ \033[1;33m"+tnxt+"\033[0m"
			text2 = tnxt
		else:
			if "--" in line:
				text = "⚙️\033[36m"+line+"\033[0m"
				text2 = line
			else:
				text = "⚾\033[34m"+line+"\033[0m"
				text2 = line
	data['outp'] = text
	data['starttime'] = tox
	data['endtime'] = tos
	
	d['build'].append(data)
	ctrixmake.WriteToFile(writeLogFile, text2)
	print(data['outp'])

toc = time.perf_counter()
tend = round( ( (toc - tic) / 60 ), 2 )
tmin = round(((toc-tic)/60))
tpresec = str(tend).split(".")[1]
tsec = ( int( tpresec ) * 60 ) / 100;

print(f"⏰Compiled IN {toc - tic:0.2f} seconds OR {tmin} minutes {tpresec} seconds")
#print(proc.stderr)
d['endtime'] = round(((toc - tic) / 60), 2)
JsonDeps = json.dumps(d, indent=2, sort_keys=False, ensure_ascii=False)
dataFileName = path + '/data.json'
print("dataFileName: "+dataFileName)
with open(dataFileName, 'w', encoding='utf-8') as filedata:  
	filedata.write(JsonDeps)
#mymodule.hello()
#print(mymodule.fib(9))